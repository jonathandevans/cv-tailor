generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  CV            CV[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model CV {
  id        String   @id @default(uuid())
  userId    String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  summary     Summary?
  experiences Experience[]
  eduction    Eduction[]
  skills      Skill[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Summary {
  id   String @id @default(uuid())
  cvId String @unique

  fullName           String?
  email              String?
  displayEmail       Boolean @default(true)
  phoneNumber        String?
  displayPhoneNumber Boolean @default(true)
  linkedIn           String?
  displayLinkedIn    Boolean @default(false)
  website            String?
  displayWebsite     Boolean @default(false)
  location           String?
  displayLocation    Boolean @default(false)
  summary            String?
  displaySummary     Boolean @default(true)

  CV CV @relation(fields: [cvId], references: [id], onDelete: Cascade)
}

model Experience {
  id   String @id @default(uuid())
  cvId String

  title              String?
  displayTitle       Boolean   @default(true)
  company            String?
  displayCompany     Boolean   @default(true)
  startDate          DateTime?
  endDate            DateTime?
  current            Boolean   @default(false)
  displayDate        Boolean   @default(true)
  description        String?
  displayDescription Boolean   @default(true)

  CV CV @relation(fields: [cvId], references: [id], onDelete: Cascade)
}

model Eduction {
  id   String @id @default(uuid())
  cvId String

  title              String?
  displayTitle       Boolean   @default(true)
  institute          String?
  displayInstitute   Boolean   @default(true)
  location           String?
  displayLocation    Boolean   @default(true)
  endDate            DateTime?
  current            Boolean   @default(false)
  displayEndDate     Boolean   @default(true)
  results            String?
  displayResults     Boolean   @default(true)
  description        String?
  displayDescription Boolean   @default(true)

  CV CV @relation(fields: [cvId], references: [id], onDelete: Cascade)
}

model Skill {
  id   String @id @default(uuid())
  cvId String

  description        String?
  displayDescription Boolean @default(true)

  CV CV @relation(fields: [cvId], references: [id], onDelete: Cascade)
}
